# Create dataframe with mean column and sd
col.wise <- mapply(rnorm, nrow(log.gr), col.means, col.sd/30)
colnames(col.wise) <- resources
# Make heatmap
col.heat <- heatmap.2(as.matrix(col.wise), distfun = function(x)
vegdist(x, method = distance),
hclustfun = function(x) hclust(x, method = clust),
col = yellow.red.colors, trace = "none", density.info = "none",
labRow = strains, labCol = resources)
ol.heat <- heatmap.2(as.matrix(col.wise), distfun = function(x)
vegdist(x, method = distance),
hclustfun = function(x) hclust(x, method = clust),
col = yellow.red.colors, trace = "none", density.info = "none",
labRow = strains, labCol = resources)
plot.new()
col.heat <- heatmap.2(as.matrix(col.wise), distfun = function(x)
vegdist(x, method = distance),
hclustfun = function(x) hclust(x, method = clust),
col = yellow.red.colors, trace = "none", density.info = "none",
labRow = strains, labCol = resources)
row.means <-rowMeans(log.gr)
# Calculate standard deviation of rows
row.sd <- apply(log.gr, 1, sd)
# Create dataframe with mean rows and sd
row.wise <- t(mapply(rnorm,ncol(log.gr), row.means, row.sd/30))
colnames(row.wise) <- colnames(log.gr)
row.heat <- heatmap.2(as.matrix(row.wise), distfun = function(x)
vegdist(x, method = distance),
hclustfun = function(x) hclust(x, method = clust),
col = yellow.red.colors, trace = "none", density.info = "none",
labRow = strains, labCol = resources)
plot.new()
row.wise <- t(mapply(rnorm,ncol(log.gr), row.means, row.sd/30))
colnames(row.wise) <- colnames(log.gr)
row.heat <- heatmap.2(as.matrix(row.wise), distfun = function(x)
vegdist(x, method = distance),
hclustfun = function(x) hclust(x, method = clust),
col = yellow.red.colors, trace = "none", density.info = "none",
labRow = strains, labCol = resources)
rm(list=ls())
getwd()
setwd("~/GitHub/PhosTrait")
require("png")
require("vegan")
require("pvclust")
require("gplots")
require("gridGraphics")
require("grid")
require("gplots")
require("gridExtra")
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
str(gr.data)
colnames(gr.data)[1]<-"isolate"
# Data standardizing - divide by sum of species growth
gr.std <- gr.data[,2:19] / (apply(gr.data[,2:19], 1, sum))
# Names
resources <- colnames(gr.data[,2:19])
strains <- gr.data[,1]
RAC <- function(x = ""){
x = as.vector(x)
x.ab = x[x > 0]
x.ab.ranked = x.ab[order(x.ab, decreasing = TRUE)]
return(x.ab.ranked)
}
RAC(gr.std)
head(gr.data)
rac <- RAC(x = LL1)
rac <- RAC(x = gr.data[1,])
gr.data[1,]
grdata.t <- t(gr.data)
grdata.t
grdata.t <- as.data.frame(gr.data)
grdata.t
rac <- RAC(x = gr.data[1])
rac <- RAC(gr.data[1])
rac <- RAC(gr.data[,1])
rac
rac <- RAC(gr.data[,2])
rac
?tapply
apply(grdata.t,2,RAC)
grdata.t
grdata.t <- as.data.frame(t(gr.data))
head(gradata.t)
head(grdata.t)
rownames(gr.data)[1]<- strains
rownames(gr.data)[1]<- gr.data[,1]
rownames(gr.data.t)[1]<- gr.data[,1]
rownames(grdata.t)[1]<- gr.data[,1]
grdata.t <- as.data.frame(t(gr.data))
dim(grdata.t)
dim(gr.data[,1])
length(gr.data[,1])
gr.data[,1]
rownames(grdata.t)<- gr.data[,1]
colnames(grdata.t)<- gr.data[,1]
head(grdata.t)
grdata.t <-grdata.t[-1,]
head(grdata.t)
colnames(grdata.t)<- gr.data[,1]
grdata.t <-grdata.t[-1,]
apply(grdata.t,2,RAC)
rac.p <-as.data.frame(apply(grdata.t,2,RAC))
rac.p
head(gr.data)
# Data standardizing - divide by sum of species growth
gr.std <- gr.data[,2:19] / (apply(gr.data[,2:19], 1, sum))
head(gr.std)
min(gr.std)
max(gr.std)
# Data standardizing: 0 - 1
norm.g <- (x) (x-min(x))/(max(x)-min(x))
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
colnames(gr.data)[1]<-"isolate"
grdata.t <- as.data.frame(t(gr.data))
colnames(grdata.t)<- gr.data[,1]
grdata.t <-grdata.t[-1,]
norm.g.data <- apply(grdata.t, 2, norm.g)
head(grdata.t)
norm.g.data <- apply(grdata.t, 1, norm.g)
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(grdata.t, 2, norm.g)
norm.g(gr.data[1,])
norm.g(gr.data[1,])
j <- c(1,2,3,0.5,0.001)
norm.g(j)
grdata.t
grdata.t[,1]
head(gr.data)
head(grdata.t)
grdata.t <- as.data.frame(gr.data))
grdata.t <- as.data.frame(t(gr.data))
colnames(grdata.t)<- gr.data[,1]
grdata.t <-grdata.t[-1,]
head(grdata.t)
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(grdata.t, 2, norm.g)
norm.g(norm.g[,1])
norm.g(grdata.t[,1])
grdata.t[,1]
str(grdata.t)
grdata.t[1,1]
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
head(gr.data)
colnames(gr.data)[1]<-"isolate"
head(gr.data)
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
colnames(gr.data)[1]<-"isolate"
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
colnames(gr.data)[1]<-"isolate"
grdata.t <- as.data.frame(t(gr.data))
colnames(grdata.t)<- gr.data[,1]
grdata.t <-grdata.t[-1,]
head(grdata.t)
rownames(grdata.t) <- c()
grdata.t
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(grdata.t, 2, norm.g)
str(grdata.t)
as.numeric(grdata.t)
rownames(grdata.t) <- c()
as.numeric(grdata.t)
as.numeric(unlist(grdata.t))
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
colnames(gr.data)[1]<-"isolate"
str(gr.data)
gr.data <-gr.data[,-1]
head(gr.data)
gr.data.t<-t(gr.data)
gr.data.t
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
gr.data.t<-t(gr.data)
norm.g.data
norm.g.data
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(grdata.t, 2, norm.g)
gr.data.t
str(gr.data.t)
head(gr.data)
norm.g(gr.data[,1])
norm.g(gr.data.t[1,])
norm.g.data <- apply(grdata.t, 1, norm.g)
norm.g.data <- apply(grdata.t[1,], 1, norm.g)
norm.g.data <- apply(grdata.t[1,], 2, norm.g)
norm.g.data <- apply(grdata, 1, norm.g)
norm.g.data <- apply(gr.data, 1, norm.g)
norm.g.data
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
norm.g.data <- apply(gr.data, 1, norm.g)
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
colnames(gr.data)[1]<-"isolate"
gr.data <-gr.data[,-1]
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(gr.data, 1, norm.g)
norm.g.data
min(norm.g.data[,1])
max(norm.g.data[,1])
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
colnames(gr.data)[1]<-"isolate"
head(gr.data)
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
colnames(gr.data)[1]<-"isolate"
gr.data <-gr.data[,-1]
head(gr.data)
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(gr.data, 1, norm.g)
norm.g.data
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
gr.data
colnames(gr.data)[1]<-"isolate"
head(gr.data)
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE) # column = resources
gr.data
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE) # column = resources
colnames(gr.data)[1]<-"isolate"
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
dim(gr.data)
norm.g.data <- apply(gr.data[,2:19], 1, norm.g)
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE) # column = resources
colnames(gr.data)[1]<-"isolate"
#gr.data <-gr.data[,-1]
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(gr.data[,2:19], 1, norm.g)
norm.g.data
colnames(norm.g.data)<-colnames(gr.data)[1]
colnames(norm.g.data)<-colnames(gr.data)
colnames(gr.data)
colnames(norm.g.data)<-rownames(gr.data)
norm.g.data
gr.data
colnames(norm.g.data)<-gr.data[1,]
gr.data[1,]
colnames(norm.g.data)<-gr.data[2:19,]
norm.g.data
colnames(norm.g.data)<-gr.data[2:39,]
gr.data[2:39,]
gr.data[1,]
gr.data[-1,]
gr.data[-1,]
gr.data[1,]
gr.data[1,-1]
gr.data[1,]
gr.data[,1]
colnames(norm.g.data)<-gr.data[,1]
norm.g.data
# Ranks
ranks <- as.vector(seq(1, length(norm.g.data)))
ranks
norm.g.data
dim(norm.g.data)
length(norm.g.data)
dim(norm.g.data)[2]
# Ranks
ranks <- as.vector(seq(1, dim(norm.g.data)[2]))
ranks
LL <- norm.g.data[,1:18]
WG <- norm.g.data[,19:39]
WG <- norm.g.data[,19:40]
matplot(ranks, LL)
matplot(t(ranks), LL)
ranks
LL
dim(norm.g.data)[2]
# Ranks
ranks <- as.vector(seq(1, dim(norm.g.data)[1]))
matplot(ranks, LL)
matlines(ranks, LL)
plot(new)
plot.new()
matlines(ranks, LL)
matlines(ranks, LL)
LL
matplot(ranks,LL, type = l)
matplot(ranks,LL, type = "l")
# Ordering
row.names(norm.g.data) <- c()
norm.g.data
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(gr.data[,2:19], 1, norm.g)
colnames(norm.g.data)<-gr.data[,1]
# Ordering
#row.names(norm.g.data) <- c()
sort(norm.g.data)
# Ordering
#row.names(norm.g.data) <- c()
apply(norm.g.data,2,sort)
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE) # column = resources
colnames(gr.data)[1]<-"isolate"
# Data standardizing: 0 - 1
norm.g <- function(x) (x-min(x))/(max(x)-min(x))
norm.g.data <- apply(gr.data[,2:19], 1, norm.g)
colnames(norm.g.data)<-gr.data[,1]
# Ordering
#row.names(norm.g.data) <- c()
apply(norm.g.data,2,sort)
# Ranks
ranks <- as.vector(seq(1, dim(norm.g.data)[1]))
# Little Long and Wintergreen data
LL <- norm.g.data[,1:18]
WG <- norm.g.data[,19:39]
matplot(ranks,LL, type = "l")
plot.new()
matplot(ranks,LL, type = "l")
# Ordering
#row.names(norm.g.data) <- c()
norm.sort <- apply(norm.g.data,2,sort)
norm.sort
# Ranks
ranks <- as.vector(seq(1, dim(norm.sort)[1]))
# Little Long and Wintergreen data
LL <- norm.sort[,1:18]
WG <- norm.sort[,19:39]
plot.new()
matplot(ranks,LL, type = "l")
matlines(ranks, LL)
?seq
# Ordering
#row.names(norm.g.data) <- c()
norm.sort <- apply(norm.g.data, 2, sort, decreasing=F)
norm.sort
# Ordering
#row.names(norm.g.data) <- c()
norm.sort <- apply(norm.g.data, 2, sort, decreasing=T)
norm.sort
# Little Long and Wintergreen data
LL <- norm.sort[,1:18]
WG <- norm.sort[,19:39]
plot.new()
matplot(ranks,LL, type = "l")
matplot(ranks,LL, type = "l", lyt = 2, lwd = 1, col = "black")
matplot(ranks,LL, type = "l", lyt = 2, lwd = 1, col = "black")
plot.new()
matplot(ranks,LL, type = "l", lyt = 2, lwd = 1, col = "black")
LL <- norm.sort[,1:18]
WG <- norm.sort[,19:39]
plot.new()
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "black")
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "black", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate")
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "black", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate" xlim = c(1,20), ylim = c(0, 1), ls = 2)
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "black", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), ls = 2)
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "black", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 2)
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "black", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 1)
plot.new()
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "black", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 1)
matlines(ranks,WW, type = "l", lty = 3, lwd = 1, col = "black")
plot.new()
matplot(ranks,LL, type = "l", lty = 2, lwd = 1, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 3, lwd = 1, col = "black")
plot.new()
matplot(ranks,LL, type = "l", lty = 2, lwd = 2, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 1, lwd = 2, col = "black")
matplot(ranks,LL, type = "l", lty = 1, lwd = 2, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 1.5, lwd = 3, col = "black")
matplot(ranks,LL, type = "l", lty = 1, lwd = 2, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 3, lwd = 1.5, col = "black")
matplot(ranks,LL, type = "l", lty = 2, lwd = 2, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,20), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 3, lwd = 1.5, col = "black")
plot.new()
matplot(ranks,LL, type = "l", lty = 2, lwd = 2, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(1,19), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 3, lwd = 1.5, col = "black")
matplot(ranks,LL, type = "l", lty = 2, lwd = 2, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(0,19), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 3, lwd = 1.5, col = "black")
matplot(ranks,LL, type = "l", lty = 2, lwd = 2, col = "grey", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(0,20), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 3, lwd = 1.5, col = "black")
Evar <- function(x){
x <- as.vector(x[x > 0])
1 - (2/pi)*atan(var(log(x)))
}
evar <- function(x){
x <- as.vector(x[x > 0])
1 - (2/pi)*atan(var(log(x)))
}
even <- evar(norm.sort)
even
norm.sort
even <- apply(norm.sort,2,evar)
even
t.test(even.LL, even.WG)
even.LL <- apply(LL,2,evar)
even.WG <- apply(WB,2,evar)
t.test(even.LL, even.WG)
even.LL <- apply(LL,2,evar)
even.WG <- apply(WG,2,evar)
t.test(even.LL, even.WG)
even.LL
even.WG
require("vegan")
SimpE <- function(x = ""){
S <- S.obs(x)
x = as.data.frame(x)
D <- diversity(x, "inv")
E <- (D)/S
return(E)
}
evar.LL <- apply(LL,2,evar)
evar.WG <- apply(WG,2,evar)
t.test(evar.LL, evar.WG)
SimpE <- function(x = ""){
S <- S.obs(x)
x = as.data.frame(x)
D <- diversity(x, "inv")
E <- (D)/S
return(E)
}
SimpE <- function(x = ""){
S <- S.obs(x)
x = as.data.frame(x)
D <- diversity(x, "inv")
E <- (D)/S
return(E)
}
simpe.LL <- apply(LL,2,SimpE)
simpe.WG <- apply(WG,2,SimpE)
S.obs <- function(x = ""){
rowSums(x > 0) * 1
}
SimpE <- function(x = ""){
S <- S.obs(x)
x = as.data.frame(x)
D <- diversity(x, "inv")
E <- (D)/S
return(E)
}
simpe.LL <- apply(LL,2,SimpE)
simpe.WG <- apply(WG,2,SimpE)
t.test(simpe.LL, simpe.WG)
S.obs <- function(x = ""){
rowSums(x > 0) * 1
}
SimpE <- function(x = ""){
S <- S.obs(x)
x = as.data.frame(x)
D <- diversity(x, "inv")
E <- (D)/S
return(E)
}
Simpe(LL[,1])
SimpE(LL[,1])
SimpE(LL)
simpe.LL <- apply(LL,2,SimpE)
simpe.WG <- apply(WG,2,SimpE)
simpe.LL <- apply(LL,2,SimpE)
simpe.LL <- apply(LL,2,SimpE)
simpe.LL <- apply(LL,1,SimpE)
SimpE(LL)
simpe.LL <- SimpE(LL)
simpe.WG <- SimpE(WG)
t.test(simpe.LL, simpe.WG)
simpe.WG
simpe.LL <- SimpE(LL) > 0
simpe.LL
simpe.LL <- SimpE(LL) > 0 * SimpE(LL)
simpe.LL
simpe.LL[!is.finite(simpe.LL)] <- NA
simpe.LL
simpe.LL<- simpe.LL, na.rm=TRUE
simpe.LL <- SimpE(LL)
simpe.LL[is.finite(simpe.LL)]
simpe.WG <- SimpE(WG)
simpe.WB <- simpe.WG[is.finite(simpe.WG)]
t.test(simpe.LL, simpe.WG)
simpe.LL
simpe.LL <- SimpE(LL)
simpe.LL <- simpe.LL[is.finite(simpe.LL)]
simpe.LL
simpe.WG <- SimpE(WG)
simpe.WB <- simpe.WG[is.finite(simpe.WG)]
simpe.WG <- simpe.WG[is.finite(simpe.WG)]
simpe.WG
t.test(simpe.LL, simpe.WG)
LL <- norm.sort[,1:18]
WG <- norm.sort[,19:39]
plot.new()
matplot(ranks,LL, type = "l", lty = 2, lwd = 2, col = "blue", xlab = "Rank phosphorus preference",
ylab = "Scaled growth rate", xlim = c(0,20), ylim = c(0, 1), las = 1)
matlines(ranks,WG, type = "l", lty = 3, lwd = 1.5, col = "red")
wilcox.test(evar.LL,evar.WG)
wilcox.test(simpe.LL,simpe.WG)
