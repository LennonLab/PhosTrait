lmat = rbind( c(0, 3), c(2,1), c(0,4) ), lhei = c(0.25, 4, 0.25 ),
)
grab_grob()
})
png(filename="~/GitHub/PhosTrait/figures/HeatMap.png", width = 2400,
height = 2400, res = 96*2)
grid.newpage()
grid.arrange(grobs = gl, ncol = 2, clip = TRUE)
dev.off()
graphics.off()
heat.list <- list(rand, col.wise, row.wise, log.gr)
# Function for running through list
grab_grob <- function(){
grid.echo()
grid.grab()
}
gl <- lapply(1:4, function(i){
heatmap.2(as.matrix(heat.list[[i]]), distfun = function(x)
vegdist(x, method = distance), hclustfun = function(x)
hclust(x, method = clust), key = FALSE, keysize = 1,
key.title = NA, key.xlab = NA, col = colors, trace = "none",
density.info = "none", labRow = strains,
labCol = resources, symkey = FALSE,
colsep = 1:16, rowsep = 1:37, sepcolor = "white",
scale = "none", cexRow = 0.75, cexCol = 0.75,
lmat = rbind( c(0, 3), c(2,1), c(0,4) ), lhei = c(0.25, 4, 0.25 ),
)
grab_grob()
})
png(filename="~/GitHub/PhosTrait/figures/HeatMap.png", width = 2400,
height = 2400, res = 96*2)
grid.newpage()
grid.arrange(grobs = gl, ncol = 2, clip = TRUE)
dev.off()
graphics.off()
heat.list <- list(rand, col.wise, row.wise, log.gr)
# Function for running through list
grab_grob <- function(){
grid.echo()
grid.grab()
}
gl <- lapply(1:4, function(i){
heatmap.2(as.matrix(heat.list[[i]]), distfun = function(x)
vegdist(x, method = distance), hclustfun = function(x)
hclust(x, method = clust), key = FALSE, keysize = 1,
key.title = NA, key.xlab = NA, col = colors, trace = "none",
density.info = "none", labRow = strains,
labCol = resources, symkey = FALSE,
colsep = 1:16, rowsep = 1:37, sepcolor = "white",
scale = "none", cexRow = 1, cexCol = 1,
lmat = rbind( c(0, 3), c(2,1), c(0,4) ), lhei = c(0.25, 4, 0.25 ),
)
grab_grob()
})
png(filename="~/GitHub/PhosTrait/figures/HeatMap.png", width = 2400,
height = 2400, res = 96*2)
grid.newpage()
grid.arrange(grobs = gl, ncol = 2, clip = TRUE)
dev.off()
graphics.off()
# Example: http://stackoverflow.com/questions/13081310/combining-multiple-complex-plots-as-panels-in-a-single-figure
# Make a list of dataframes for each scenario
heat.list <- list(rand, col.wise, row.wise, log.gr)
# Function for running through list
grab_grob <- function(){
grid.echo()
grid.grab()
}
gl <- lapply(1:4, function(i){
heatmap.2(as.matrix(heat.list[[i]]), distfun = function(x)
vegdist(x, method = distance), hclustfun = function(x)
hclust(x, method = clust), key = FALSE, keysize = 1,
key.title = NA, key.xlab = NA, col = colors, trace = "none",
density.info = "none", labRow = strains,
labCol = resources, symkey = FALSE,
colsep = 1:16, rowsep = 1:37, sepcolor = "white",
scale = "none", cexRow = 1, cexCol = 1, margins = c(5,12)
lmat = rbind( c(0, 3), c(2,1), c(0,4) ), lhei = c(0.25, 4, 0.25 ),
)
grab_grob()
})
png(filename="~/GitHub/PhosTrait/figures/HeatMap.png", width = 2400,
height = 2400, res = 96*2)
grid.newpage()
grid.arrange(grobs = gl, ncol = 2, clip = TRUE)
dev.off()
graphics.off()
heat.list <- list(rand, col.wise, row.wise, log.gr)
# Function for running through list
grab_grob <- function(){
grid.echo()
grid.grab()
}
gl <- lapply(1:4, function(i){
heatmap.2(as.matrix(heat.list[[i]]), distfun = function(x)
vegdist(x, method = distance), hclustfun = function(x)
hclust(x, method = clust), key = FALSE, keysize = 1,
key.title = NA, key.xlab = NA, col = colors, trace = "none",
density.info = "none", labRow = strains,
labCol = resources, symkey = FALSE,
colsep = 1:16, rowsep = 1:37, sepcolor = "white",
scale = "none", cexRow = 1, cexCol = 1, margins = c(5,12),
lmat = rbind( c(0, 3), c(2,1), c(0,4) ), lhei = c(0.25, 4, 0.25 ),
)
grab_grob()
})
png(filename="~/GitHub/PhosTrait/figures/HeatMap.png", width = 2400,
height = 2400, res = 96*2)
grid.newpage()
grid.arrange(grobs = gl, ncol = 2, clip = TRUE)
dev.off()
graphics.off()
# Example: http://stackoverflow.com/questions/13081310/combining-multiple-complex-plots-as-panels-in-a-single-figure
# Make a list of dataframes for each scenario
heat.list <- list(rand, col.wise, row.wise, log.gr)
# Function for running through list
grab_grob <- function(){
grid.echo()
grid.grab()
}
gl <- lapply(1:4, function(i){
heatmap.2(as.matrix(heat.list[[i]]), distfun = function(x)
vegdist(x, method = distance), hclustfun = function(x)
hclust(x, method = clust), key = FALSE, keysize = 1,
key.title = NA, key.xlab = NA, col = colors, trace = "none",
density.info = "none", labRow = strains,
labCol = resources, symkey = FALSE,
colsep = 1:16, rowsep = 1:37, sepcolor = "white",
scale = "none", cexRow = 1, cexCol = 1, margins = c(6,6),
lmat = rbind( c(0, 3), c(2,1), c(0,4) ), lhei = c(0.25, 4, 0.25 ),
)
grab_grob()
})
png(filename="~/GitHub/PhosTrait/figures/HeatMap.png", width = 2400,
height = 2400, res = 96*2)
grid.newpage()
grid.arrange(grobs = gl, ncol = 2, clip = TRUE)
dev.off()
graphics.off()
rm(list=ls())
getwd()
setwd("~/GitHub/PhosTrait")
require("png")
require("grid")
require("vegan")
require("phylolm")
require("muscle")
require("seqinr")
require("ape")
gr.data <- read.csv("data/grraw.csv", sep=",", header = TRUE, row.names = 1)
str(gr.data)
# Standadize Growth Rates Across Strains
gr.std <- gr.data / (apply(gr.data, 1, sum))
# Calculate Max Growth Rate
umax <- as.matrix((apply(gr.data, 1, max)))
umax2 <- as.matrix((apply(gr.std, 1, max)))
srp <- gr.data$SRP
round(apply(gr.std, 2, max), 4)
round(apply(gr.std, 2, min), 4)
levins <- function(p_xi = ""){
p = 0
for (i in p_xi){
p = p + i^2
}
nb = 1 / (length(p_xi) * p)
return(nb)
}
nb <- as.matrix(levins(gr.std))
# Add Row & Column Names to Niche Breadth Matrix
rownames(nb) <- rownames(gr.data)
colnames(nb) <- c("nb")
read.aln <- read.alignment(file = "./data/p.isolates.silva.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.silva.fasta", format = "fasta")
read.aln <- read.alignment(file = system.file("./data/p.isolates.silva.fasta", package = "seqinr"),format = "fasta")
read.aln <- read.alignment(file = system.file("./data/p.isolates.fasta", package = "seqinr"),format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.2.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.silva.fasta.sb-fc047947-TkksA3", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.2.sina.fasta", format = "fasta")
read.aln
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.2.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.2.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:800]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
read.aln <- read.alignment(file = "./data/p.isolates.3.sina.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:800]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
read.aln <- read.alignment(file = "./data/p.isolates.2.sina.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:800]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
read.aln <- read.alignment(file = "./data/p.isolates.2.sina.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:5000]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Optional Code Adds Grid to Help Visualize Rows of Sequences
#grid(ncol(window), nrow(window), col = "lightgrey")
read.aln <- read.alignment(file = "./data/p.isolates.2.sina.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:1000]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Optional Code Adds Grid to Help Visualize Rows of Sequences
#grid(ncol(window), nrow(window), col = "lightgrey")
window <- p.DNAbin[, 100:1000]
image.DNAbin(window, cex.lab = 0.50)
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
window <- p.DNAbin[, 100:5000]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
window <- p.DNAbin[, 1000:5000]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
window <- p.DNAbin[, 1000:7000]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
window <- p.DNAbin[, 4000:7000]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
window <- p.DNAbin[, 5000:6500]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
read.aln <- read.alignment(file = "./data/p.isolates.kalign.fasta", format = "fasta")
read.aln <- read.alignment(file = "./data/p.isolates.kalign.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:800]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Read Alignment File {seqinr}
read.aln <- read.alignment(file = "./data/p.isolates.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Read Alignment File {seqinr}
read.aln <- read.alignment(file = "./data/p.isolates.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Read Alignment File {seqinr}
read.aln <- read.alignment(file = "./data/p.isolates.afa", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:800]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 275:600]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 400:600]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 300:600]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 350:600]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 375:650]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 380:675]
image.DNAbin(window, cex.lab = 0.50)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 380:700]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
read.aln <- read.alignment(file = "./data/p.isolates.afa", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 100:0900]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 500:0900]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Optional Code Adds Grid to Help Visualize Rows of Sequences
#grid(ncol(window), nrow(window), col = "lightgrey")
read.aln <- read.alignment(file = "./data/p.isolates.afa", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[, 0:900]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
read.aln <- read.alignment(file = "./data/p.isolates.afa", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[,380:750]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Optional Code Adds Grid to Help Visualize Rows of Sequences
#grid(ncol(window), nrow(window), col = "lightgrey")
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[,0:900]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Optional Code Adds Grid to Help Visualize Rows of Sequences
#grid(ncol(window), nrow(window), col = "lightgrey")
# Optional Code Adds Grid to Help Visualize Rows of Sequences
grid(ncol(window), nrow(window), col = "lightgrey")
window <- p.DNAbin[,0:900]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Optional Code Adds Grid to Help Visualize Rows of Sequences
grid(nrow(window), col = "lightgrey")
# Load Maximum Likielihood Tree File
ml.bootstrap <- read.tree("./data/RAxML_bestTree.LTDE.ML")
# Identify Outgroup Sequence
outgroup <- match("Methanosarcina", ml.bootstrap$tip.label)
# Root the Tree {ape}
ml.rooted <- root(ml.bootstrap, outgroup, resolve.root = TRUE)
# Plot the Rooted Tree{ape}
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.rooted, main = "ML", "phylogram",
use.edge.length = FALSE, direction = "right", cex = 0.6,
label.offset = 1)
add.scale.bar(cex = 0.7)
# Keep Rooted but Drop Outgroup Branch
p.tree <- drop.tip(ml.rooted, "Methanosarcina")
# Keep Rooted but Drop Outgroup Branch
p.tree <- drop.tip(ml.rooted, "Methanosarcina")
ml.bootstrap <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.rooted, main = "ML", "phylogram",
use.edge.length = FALSE, direction = "right", cex = 0.6,
label.offset = 1)
add.scale.bar(cex = 0.7)
# Keep Rooted but Drop Outgroup Branch
p.tree <- drop.tip(ml.rooted, "Methanosarcina")
ml.bootstrap <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
# Keep Rooted but Drop Outgroup Branch
p.tree <- drop.tip(ml.rooted, "Methanosarcina")
# Keep Rooted but Drop Outgroup Branch
p.tree <- drop.tip(ml.rooted, "Methanosarcina")
ml.bootstrap <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
# Define Color Palette
mypalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
# Map Phosphorus Traits {adephylo}
par(mar=c(1,1,1,1) + 0.1)
# Define Color Palette
mypalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
x <- phylo4d(ml.bootstrap, p.growth.std)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
ratio.tree = 0.5, cex.legend = 1.5, center = FALSE)
tidy.opts=list(width.cutoff=60)}
package.list <- c('ape', 'seqinr', 'muscle', 'phylolm', 'vegan', 'grid', 'png',
'phylobase', 'adephylo', 'geiger', 'picante', 'stats', 'RColorBrewer',
'caper', 'phylolm', 'pmc', 'ggplot2', 'tidyr', 'dplyr', 'phangorn', 'pander')
for (package in package.list) {
if (!require(package, character.only=TRUE, quietly=TRUE)) {
install.packages(package)
library(package, character.only=TRUE)
}
}
par(mar=c(1,1,1,1) + 0.1)
x <- phylo4d(ml.bootstrap, p.growth.std)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
ratio.tree = 0.5, cex.legend = 1.5, center = FALSE)
x <- phylo4d(ml.bootstrap, p.growth.std)
gr.data <- read.csv("data/grraw.csv", sep=",", header = TRUE, row.names = 1)
str(gr.data)
# Standadize Growth Rates Across Strains
gr.std <- gr.data / (apply(gr.data, 1, sum))
# Calculate Max Growth Rate
umax <- as.matrix((apply(gr.data, 1, max)))
round(apply(gr.std, 2, max), 4)
round(apply(gr.std, 2, min), 4)
# Standadize Growth Rates Across Strains
p.growth.std <- p.growth / (apply(p.growth, 1, sum))
# Standadize Growth Rates Across Strains
p.growth.std <- gr.data / (apply(gr.data, 1, sum))
par(mar=c(1,1,1,1) + 0.1)
x <- phylo4d(ml.bootstrap, p.growth.std)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
ratio.tree = 0.5, cex.legend = 1.5, center = FALSE)
x <- phylo4d(ml.bootstrap, p.growth.std)
x
ml.bootstrap <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
ml.bootstrap.out <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
ml.bootstrap <- drop.tip(ml.bootstrap.out, "Methanosarcina")
ml.bootstrap.out <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
ml.bootstrap <- drop.tip(ml.bootstrap.out, "Methanosarcina")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
# Map Phosphorus Traits {adephylo}
par(mar=c(1,1,1,1) + 0.1)
x <- phylo4d(ml.bootstrap, p.growth.std)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
ratio.tree = 0.5, cex.legend = 1.5, center = FALSE)
# Define Color Palette
mypalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
par(mar=c(1,1,1,1) + 0.1)
x <- phylo4d(ml.bootstrap, p.growth.std)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
ratio.tree = 0.5, cex.legend = 1.5, center = FALSE)
par(mar=c(1,5,1,5) + 0.1)
x.nb <- phylo4d(ml.bootstrap, nb)
table.phylo4d(x.nb, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
var.label=("       NB"),
ratio.tree = 0.90, cex.legend = 1.5, center = FALSE)
# Keep Rooted but Drop Outgroup Branch
ml.bootstrap.out <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
ml.bootstrap <- drop.tip(ml.bootstrap.out, "Methanosarcina")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
# Map Phosphorus Traits {adephylo}
par(mar=c(1,1,1,1) + 0.1)
# Define Color Palette
mypalette <- colorRampPalette(brewer.pal(9, "YlOrRd"))
# Map Phosphorus Traits {adephylo}
par(mar=c(1,1,1,1) + 0.1)
x <- phylo4d(ml.bootstrap, p.growth.std)
table.phylo4d(x, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
ratio.tree = 0.5, cex.legend = 1.5, center = FALSE)
par(mar=c(1,5,1,5) + 0.1)
x.nb <- phylo4d(ml.bootstrap, nb)
table.phylo4d(x.nb, treetype = "phylo", symbol = "colors", show.node = TRUE,
cex.label = 0.5, scale = FALSE, use.edge.length = FALSE,
edge.color = "black", edge.width = 2, box = FALSE,
col=mypalette(25), pch = 15, cex.symbol = 1.25,
var.label=("       NB"),
ratio.tree = 0.90, cex.legend = 1.5, center = FALSE)
