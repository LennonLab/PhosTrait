# Define Initial Simulation Options
num.steps <- steps
sim.time <- 0 # reset initial time
n.birth <- 0; n.death <- 0; n.decay <- 0;
n.immigration <- 0; n.emigration <- 0; n.zombie <- 0
# Define OTUs and Rel Abundance in Regional Pool
otus <- paste("OTU", sprintf("%05d", seq(1:200)), sep = "")
#G <- rlnorm(n=length(otus), meanlog = 1, sdlog = 0.98)
G <- rls(n = 1:length(otus), N = length(otus), alpha = 5)
G <<- G[rev(order(G))] # / sum(G)
#plot(G)
#plot(log10(G))
# Initialize Local Community and Relic Tables
N <<- table(otus) * 0; n <- 0
R <<- table(otus) * 0; r <- 0
# Initialize Local Community Membership
comm <- sample(otus, size = 100, replace = T, prob = G)
ind <- which(otus %in% comm)
N[ind] <<- N[ind] + table(comm)
# Save Time and Events
ints <- vector(mode = "numeric", length = 0)
event.list <- vector(mode = "character", length = 0)
N_series <- vector(mode = "numeric", length = 0)
R_series <- vector(mode = "numeric", length = 0)
T_series <- vector(mode = "numeric", length = 0)
# Run Simulation
while(sim.time < num.steps){
n <- sum(N)
r <- sum(R)
im <- if (n < init) {((init + im.b) - n)} else {im.b};
em <- if (n < init) {floor(0.1 * n)} else {em.b};
# Timestep
interval <- rexp(1, rate = n*b - n*d + r*u + im + em + z)
ints <- c(ints, interval)
sim.time <- sim.time + interval
# Pick Event
event = sample(c('birth', 'death', 'decay',
'immigration', 'emigration', 'zombie'),
size = 1, prob = c(b*n, d*n, r*u, im, em, z))
switch(event,
birth = birth(N = N, b = b, otus = otus),
death = death(N = N, R = R, d = d, otus = otus),
decay = decay(R = R, u = u, otus = otus,
method = decay.m,
a.decay = a.decay, b.decay = b.decay),
immigration = immigration(N = N, G = G, im = im, otus = otus),
emigration = emigration(N = N, em = em, otus = otus),
zombie = zombie(R = R, G = G, z = z, otus = otus),
stop("event must be either \"birth\", \"death\", \"decay\",
\"immigration\", \"emigration\", or \"zombie\""))
# Store Event
event.list <- c(event.list, event)
N_series <- c(N_series, sum(N))
R_series <- c(R_series, sum(R))
T_series <- c(T_series, sim.time)
# Print Statement
print(paste("Time = ", round(sim.time, 3), ": ", event,
"; N = ", sum(N), "; R = ", sum(R), sep = ""))
}
# Summary and Print Statements
event_summary <-  table(Events = event.list)
time_series <- data.frame(Time = T_series, N = N_series, R = R_series)
print(event_summary)
print(data.frame(probs = cbind(birth = b*n, death = d*n, decay = r*u,
immigration = im, emigration = em, zombie = z)))
print(data.frame(perm = cbind(birth = b, death = d, decay = u,
immigrtion = im, emigration = em, zombie = z)))
return(list(N = N, R = R, intervals = ints,
events = event.list, time_series = time_series))
}
# Equal Birth and Death and Decay
model1 <- IR_model(steps = 20, b = 0.2, d = 0.2, u = 0.2, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = "random")
# Rank Abundance Plot
K <- N + R
plot(rad(as.numeric(K) / sum(K)), type = "l", col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
# Cumulative Abundance Distribution
nN <- seq(1, max(N), 1)
cN <- rep(NA, length(nN))
for(i in 1:length(cN)){
cN[i] <- sum(N[which(N >= i)])
}
cNrel <- cN / sum(N)
nR <- seq(1, max(R), 1)
cR <- rep(NA, length(nR))
for(i in 1:length(cR)){
cR[i] <- sum(R[which(R >= i)])
}
cRrel <- cR / sum(R)
plot(cNrel ~ log10(nN), col = "blue")
points(cRrel ~ log10(nR), col = "red")
max(R)
tR <- table(R)
plot(plot())
replicate(10, {
model1 <- IR_model(steps = 20, b = 0.2, d = 0.2, u = 0.2, z = 10,
im.b = 50, em.b = 10, init = 500,
uniform.decay = TRUE, den.depend = FALSE,
a.decay = 0.7, b.decay = 0.7)
# Rank Abundance Plot
K <- N + R
lines(rad(as.numeric(K) / sum(K)), col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
})
replicate(10, {
model2 <- IR_model(steps = 50, b = 0.2, d = 0.2, u = 0.0002, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = c("random", "sp.spec", "den.depend"),
a.decay = 0.7, b.decay = 0.7)
# Rank Abundance Plot
K <- N + R
lines(rad(as.numeric(K) / sum(K)), col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
})
plot.new()
replicate(10, {
model2 <- IR_model(steps = 50, b = 0.2, d = 0.2, u = 0.0002, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = c("random", "sp.spec", "den.depend"),
a.decay = 0.7, b.decay = 0.7)
# Rank Abundance Plot
K <- N + R
lines(rad(as.numeric(K) / sum(K)), col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
})
warnings()
# Equal Birth and Death and Decay
model1 <- IR_model(steps = 20, b = 0.2, d = 0.2, u = 0.2, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = "random")
# Rank Abundance Plot
K <- N + R
plot(rad(as.numeric(K) / sum(K)), type = "l", col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
replicate(10, {
model1 <- IR_model(steps = 20, b = 0.2, d = 0.2, u = 0.2, z = 10,
im.b = 50, em.b = 10, init = 500,
uniform.decay = TRUE, den.depend = FALSE,
decay.m = "random")
# Rank Abundance Plot
K <- N + R
lines(rad(as.numeric(K) / sum(K)), col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
})
model1 <- IR_model(steps = 20, b = 0.2, d = 0.2, u = 0.2, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = "random")
replicate(10, {
model1 <- IR_model(steps = 20, b = 0.2, d = 0.2, u = 0.2, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = "random")
# Rank Abundance Plot
K <- N + R
lines(rad(as.numeric(K) / sum(K)), col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
})
# Slow Decay
rm(list = c("G", "N", "R"))
model2 <- IR_model(steps = 200, b = 0.2, d = 0.2, u = 0.02, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = "random")
# Rank Abundance Plot
plot(rad(as.numeric(G)), type = "l")
K <- N + R
plot(rad(as.numeric(K) / sum(K)), type = "l")
lines(rad(as.numeric(N) / sum(N)), col = "blue")
lines(rad(as.numeric(R) / sum(R)), col = "red")
# Very Slow Decay
rm(list = c("G", "N", "R"))
model2 <- IR_model(steps = 500, b = 0.2, d = 0.2, u = 0.0002, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = "random")
# Rank Abundance Plot
K <- N + R
plot(rad(as.numeric(K) / sum(K)), type = "l", col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
replicate(10, {
model2 <- IR_model(steps = 500, b = 0.2, d = 0.2, u = 0.0002, z = 10,
im.b = 50, em.b = 10, init = 500,
decay.m = c("random", "sp.spec", "den.depend"),
a.decay = 0.7, b.decay = 0.7)
# Rank Abundance Plot
K <- N + R
lines(rad(as.numeric(K) / sum(K)), col = rgb(0,0,0,0.5), lwd = 5)
lines(rad(as.numeric(N) / sum(N)), col = rgb(0,0,1,0.5), lwd = 5)
lines(rad(as.numeric(R) / sum(R)), col = rgb(1,0,0,0.5), lwd = 5)
})
library("xcms")
# Chunk 1
rm(list=ls())
setwd("~/GitHub/PhosTrait")
# Chunk 2
package.list <- c('ape', 'seqinr', 'muscle', 'phylolm', 'vegan', 'grid', 'png',
'phylobase', 'adephylo', 'geiger', 'picante', 'stats', 'RColorBrewer',
'caper', 'phylolm', 'pmc', 'ggplot2', 'tidyr', 'dplyr', 'phangorn', 'pander')
for (package in package.list) {
if (!require(package, character.only=TRUE, quietly=TRUE)) {
install.packages(package)
library(package, character.only=TRUE)
}
}
# Chunk 3
gr.data <- read.csv("data/grraw.csv", sep=",", header = TRUE, row.names = 1)
str(gr.data)
# Standadize Growth Rates Across Strains
gr.std <- gr.data / (apply(gr.data, 1, sum))
# Standadize Growth Rates Across Strains
p.growth.std <- gr.data / (apply(gr.data, 1, sum))
# Calculate Max Growth Rate
umax <- as.matrix((apply(gr.data, 1, max)))
round(apply(gr.std, 2, max), 4)
round(apply(gr.std, 2, min), 4)
# Chunk 4
levins <- function(p_xi = ""){
p = 0
for (i in p_xi){
p = p + i^2
}
nb = 1 / (length(p_xi) * p)
return(nb)
}
# Calculate niche breadth for Each Isolate
nb <- as.matrix(levins(gr.std))
# Add Row & Column Names to Niche Breadth Matrix
rownames(nb) <- rownames(gr.data)
colnames(nb) <- c("nb")
# Chunk 5
# Read Alignment File {seqinr}
read.aln <- read.alignment(file = "./data/2019_ML_Tree/20190322_PhosTrait.fasta", format = "fasta")
# Convert Alignment File to DNAbin Object {ape}
p.DNAbin <- as.DNAbin(read.aln)
# Identify Base Pair Region of 16S rRNA Gene to Visuzlize
window <- p.DNAbin[,0:900]
# Command to Visusalize Sequence Alignment {ape}
image.DNAbin(window, cex.lab = 0.50)
# Optional Code Adds Grid to Help Visualize Rows of Sequences
grid(nrow(window), col = "lightgrey")
# Keep Rooted but Drop Outgroup Branch
#ml.bootstrap.out <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
ml.bootstrap.out <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.OutPhos")
ml.full <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_Full")
ml.short <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_Short")
ml.full.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_FullRoot")
ml.short.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_ShortRoot")
# Remove Neighbors
ptrait.samps <- c(row.names(gr.data), "Methanosarcina")
ptrait.samps
neighbors <- setdiff(ml.bootstrap.out$tip.label, ptrait.samps)
ml.bootstrap.samps <- drop.tip(ml.bootstrap.out, neighbors)
ml.full.samps <- drop.tip(ml.full, setdiff(ml.full$tip.label, ptrait.samps))
ml.short.samps <- drop.tip(ml.short, setdiff(ml.short$tip.label, ptrait.samps))
setdiff(ml.short$tip.label, ptrait.samps)
ml.short.samps <- drop.tip(ml.short, setdiff(ml.short$tip.label, ptrait.samps))
ml.full.root.samps <- drop.tip(ml.full.root, setdiff(ml.full.root$tip.label, ptrait.samps))
ml.short.root.samps <- drop.tip(ml.short.root, setdiff(ml.short.root$tip.label, ptrait.samps))
s
# Root Using Outgroup
ml.bootstrap.rooted <- root(ml.bootstrap.samps, "Methanosarcina")
ml.full.samps.rooted <- root(ml.full.samps, "Methanosarcina")
ml.short.samps.rooted <- root(ml.short.samps, "Methanosarcina")
ml.full.root.samps.rooted <- root(ml.full.root.samps, "Methanosarcina")
ml.short.root.samps.rooted <- root(ml.short.root.samps, "Methanosarcina")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.full.samps.rooted, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.full.samps.rooted, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.full.samps.rooted$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.samps.rooted, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.samps.rooted$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.full.root.samps.rooted, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.full.root.samps.rooted$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.root.samps.rooted, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.samps.rooted$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
# Root Using Outgroup
ml.bootstrap.rooted <- root(ml.bootstrap.samps, "Methanosarcina")
# Outgroup
ml.bootstrap <- drop.tip(ml.bootstrap.rooted, "Methanosarcina")
)
)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
# Outgroup
ml.bootstrap <- drop.tip(ml.bootstrap.rooted, "Methanosarcina")
ml.full.bootstrap <- drop.tip(ml.full.samps.rooted, "Methanosarcina")
ml.short.bootstrap <- drop.tip(ml.short.samps.rooted, "Methanosarcina")
ml.full.root.bootstrap <- drop.tip(ml.full.root.samps.rooted, "Methanosarcina")
ml.short.root.bootstrap <- drop.tip(ml.short.root.samps.rooted, "Methanosarcina")
help(drop.tip)
ml.full.samps <- ape::drop.tip(ml.full, setdiff(ml.full$tip.label, ptrait.samps))
# Keep Rooted but Drop Outgroup Branch
#ml.bootstrap.out <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
ml.bootstrap.out <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.OutPhos")
ml.full <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_Full")
ml.short <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_Short")
ml.full.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_FullRoot")
ml.short.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_ShortRoot")
# Remove Neighbors
ptrait.samps <- c(row.names(gr.data), "Methanosarcina")
neighbors <- setdiff(ml.bootstrap.out$tip.label, ptrait.samps)
ml.bootstrap.samps <- ape::drop.tip(ml.bootstrap.out, neighbors)
ml.full.samps <- ape::drop.tip(ml.full, setdiff(ml.full$tip.label, ptrait.samps))
ml.short.samps <- ape::drop.tip(ml.short, setdiff(ml.short$tip.label, ptrait.samps))
ml.full.root.samps <- ape::drop.tip(ml.full.root, setdiff(ml.full.root$tip.label, ptrait.samps))
ml.short.root.samps <- ape::drop.tip(ml.short.root, setdiff(ml.short.root$tip.label, ptrait.samps))
# Root Using Outgroup
ml.bootstrap.rooted <- root(ml.bootstrap.samps, "Methanosarcina")
ml.full.samps.rooted <- root(ml.full.samps, "Methanosarcina")
ml.short.samps.rooted <- root(ml.short.samps, "Methanosarcina")
ml.full.root.samps.rooted <- root(ml.full.root.samps, "Methanosarcina")
ml.short.root.samps.rooted <- root(ml.short.root.samps, "Methanosarcina")
# Outgroup
ml.bootstrap <- drop.tip(ml.bootstrap.rooted, "Methanosarcina")
ml.full.bootstrap <- drop.tip(ml.full.samps.rooted, "Methanosarcina")
ml.short.bootstrap <- drop.tip(ml.short.samps.rooted, "Methanosarcina")
ml.full.root.bootstrap <- drop.tip(ml.full.root.samps.rooted, "Methanosarcina")
ml.short.root.bootstrap <- drop.tip(ml.short.root.samps.rooted, "Methanosarcina")
# Outgroup
ml.bootstrap <- ape::drop.tip(ml.bootstrap.rooted, "Methanosarcina")
ml.full.bootstrap <- ape::drop.tip(ml.full.samps.rooted, "Methanosarcina")
ml.short.bootstrap <- ape::drop.tip(ml.short.samps.rooted, "Methanosarcina")
ml.full.root.bootstrap <- ape::drop.tip(ml.full.root.samps.rooted, "Methanosarcina")
ml.short.root.bootstrap <- ape::drop.tip(ml.short.root.samps.rooted, "Methanosarcina")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.full.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.full.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.full, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.full$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
# Keep Rooted but Drop Outgroup Branch
#ml.bootstrap.out <- read.tree("./data/ml_tree/RAxML_bipartitions.T1")
ml.bootstrap.out <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.OutPhos")
ml.full <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_Full")
ml.short <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_Short")
ml.full.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_FullRoot")
ml.short.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_ShortRoot")
# Remove Neighbors
ptrait.samps <- c(row.names(gr.data), "Methanosarcina")
neighbors <- setdiff(ml.bootstrap.out$tip.label, ptrait.samps)
ml.bootstrap.samps <- ape::drop.tip(ml.bootstrap.out, neighbors)
ml.full.samps <- ape::drop.tip(ml.full, setdiff(ml.full$tip.label, ptrait.samps))
ml.short.samps <- ape::drop.tip(ml.short, setdiff(ml.short$tip.label, ptrait.samps))
ml.full.root.samps <- ape::drop.tip(ml.full.root, setdiff(ml.full.root$tip.label, ptrait.samps))
ml.short.root.samps <- ape::drop.tip(ml.short.root, setdiff(ml.short.root$tip.label, ptrait.samps))
# Root Using Outgroup
ml.bootstrap.rooted <- root(ml.bootstrap.samps, "Methanosarcina")
ml.full.samps.rooted <- root(ml.full.samps, "Methanosarcina")
ml.short.samps.rooted <- root(ml.short.samps, "Methanosarcina")
ml.full.root.samps.rooted <- root(ml.full.root.samps, "Methanosarcina")
ml.short.root.samps.rooted <- root(ml.short.root.samps, "Methanosarcina")
# Outgroup
ml.bootstrap <- ape::drop.tip(ml.bootstrap.rooted, "Methanosarcina")
ml.full.bootstrap <- ape::drop.tip(ml.full.samps.rooted, "Methanosarcina")
ml.short.bootstrap <- ape::drop.tip(ml.short.samps.rooted, "Methanosarcina")
ml.full.root.bootstrap <- ape::drop.tip(ml.full.root.samps.rooted, "Methanosarcina")
ml.short.root.bootstrap <- ape::drop.tip(ml.short.root.samps.rooted, "Methanosarcina")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.full.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.full.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
plot.phylo(ml.short.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
plot.phylo(ml.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
ml.short.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitions.PhosRAxML_ShortRoot")
# Remove Neighbors
ptrait.samps <- c(row.names(gr.data), "Methanosarcina")
neighbors <- setdiff(ml.bootstrap.out$tip.label, ptrait.samps)
ml.bootstrap.samps <- ape::drop.tip(ml.bootstrap.out, neighbors)
ml.short.root.samps <- ape::drop.tip(ml.short.root, setdiff(ml.short.root$tip.label, ptrait.samps))
ml.short.root.samps.rooted <- root(ml.short.root.samps, "Methanosarcina")
ml.short.root.bootstrap <- ape::drop.tip(ml.short.root.samps.rooted, "Methanosarcina")
ml.short.root.bootstrap
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
help(drop.tip)
ml.short.root.samps.rooted <- ml.short.root.samps
# Outgroup
ml.bootstrap <- ape::drop.tip(ml.bootstrap.rooted, "Methanosarcina")
ml.full.bootstrap <- ape::drop.tip(ml.full.samps.rooted, "Methanosarcina")
ml.short.bootstrap <- ape::drop.tip(ml.short.samps.rooted, "Methanosarcina")
ml.full.root.bootstrap <- ape::drop.tip(ml.full.root.samps.rooted, "Methanosarcina")
ml.short.root.bootstrap <- ape::drop.tip(ml.short.root.samps.rooted, "Methanosarcina")
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
ml.short.root.bootstrap <- ape::drop.tip(ml.short.root.samps.rooted, "Methanosarcina", trim.internal = TRUE)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,1,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
par(mar = c(1,2,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,2,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
ml.short.root.bootstrap$node.label
ml.short.root.bootstrap
ml.short.root.bootstrap$node.label
ml.full$node.label
ml.short$node.label
ml.short.root <- read.tree("./data/2019_ML_Tree/RAxML_bipartitionsBranchLabels.PhosRAxML_Short")
ml.short.root.samps <- ape::drop.tip(ml.short.root, setdiff(ml.short.root$tip.label, ptrait.samps))
ml.short.root.samps.rooted <- ml.short.root.samps
ml.short.root.bootstrap <- ape::drop.tip(ml.short.root.samps.rooted, "Methanosarcina", trim.internal = TRUE)
par(mar = c(1,2,2,1) + 0.1)
par(mar = c(1,2,2,1) + 0.1)
plot.phylo(ml.short.root.bootstrap, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.bootstrap$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
par(mar = c(1,2,2,1) + 0.1)
plot.phylo(ml.short.root.samps.rooted, type = "phylogram", direction = "right", show.tip.label=TRUE,
use.edge.length = FALSE, cex = 0.6, label.offset = 1,
main = "Maximum Likelihood with Support Values")
add.scale.bar(cex = 0.7)
nodelabels(ml.short.root.samps.rooted$node.label, font = 2, bg = "white", frame = "r", cex = 0.5)
ml.short <- read.tree("./data/2019_ML_Tree/RAxML_bipartitionsBranchLabels.PhosRAxML_Short ")
ml.short <- read.tree("./data/2019_ML_Tree/RAxML_bipartitionsBranchLabels.PhosRAxML_Short ")
ml.short <- read.tree("./data/2019_ML_Tree/RAxML_bipartitionsBranchLabels.PhosRAxML_Short")
ml.short$node.label
