dev.off()
graphics.off() # shuts down open devices
img <- readPNG("./figures/Tradeoff.png")
grid.raster(img)
# Subset umax data to plot
LL.nb <- subset(nb, lake == "LL")
WG.nb <- subset(nb, lake == "WG")
# Subset niche breadth data to plot
LL.umax <- subset(umax, lake == "LL")
WG.umax<-subset(umax, lake == "WG")
# Initiate file for figure
png(filename="~/GitHub/PhosTrait/figures/Tradeoff.png",
width = 1200, height = 1200, res = 96*2)
# Set plotting dimensions
par(mar=c(4,4,0,1)+ 0.1)
# Little Long points
plot(LL.nb, log10(LL.umax), axes = F, xlab = "Niche breadth", ylab = "Maximum growth rate",
pch = 21, cex = 2.5, las = 1, col = "black", bg = "white",
xlim = c(0.2,1), ylim = c(-2, 1), lwd = 1.5)
# Wintergreen points
points(WG.nb, log10(WG.umax), pch = 21, cex = 2.5, col = "black", bg = "black")
# Format axes
box(lwd = 2)
ticks <- c(0.01, 0.1, 1, 10)
axis(side = 1, labels = T, cex.axis = 1)
axis(side = 2, las = 1, cex.axis = 1, labels = ticks,
at = log10(ticks))
axis(3, labels = F)
axis(side = 4, at = log10(ticks), labels = F)
# Plot WG regression lines
curve(fit$coefficients[1] + fit$coefficients[2] * x, from = 0.25,
to = 0.95, add = TRUE, lty = 2, lwd = 2)
# Plot LL regression lines
Int <- fit$coefficients[1] + fit$coefficients[3]
Slp <- fit$coefficients[2] + fit$coefficients[4]
curve((Int) + (Slp) * x, from = 0.25, to = 0.95,
add = TRUE, lty = 2, lwd = 2)
legend("topleft", legend = c("LL","WG"), pch = c(1, 16), cex = 1,
col = "black", bty = "n", pt.cex = 2)
dev.off()
graphics.off() # shuts down open devices
img <- readPNG("./figures/Tradeoff.png")
grid.raster(img)
# Subset umax data to plot
LL.nb <- subset(nb, lake == "LL")
WG.nb <- subset(nb, lake == "WG")
# Subset niche breadth data to plot
LL.umax <- subset(umax, lake == "LL")
WG.umax<-subset(umax, lake == "WG")
# Initiate file for figure
png(filename="~/GitHub/PhosTrait/figures/Tradeoff.png",
width = 1200, height = 1200, res = 96*2)
# Set plotting dimensions
par(mar=c(4,4,0,1)+ 0.1)
# Little Long points
plot(LL.nb, log10(LL.umax), axes = F, xlab = "Niche breadth", ylab = "Maximum growth rate",
pch = 21, cex = 2, cex.axis = 4, las = 1, col = "black", bg = "white",
xlim = c(0.2,1), ylim = c(-2, 1), lwd = 1.5)
# Wintergreen points
points(WG.nb, log10(WG.umax), pch = 21, cex = 2, col = "black", bg = "black")
# Format axes
box(lwd = 2)
ticks <- c(0.01, 0.1, 1, 10)
axis(side = 1, labels = T, cex.axis = 1)
axis(side = 2, las = 1, cex.axis = 1, labels = ticks,
at = log10(ticks))
axis(3, labels = F)
axis(side = 4, at = log10(ticks), labels = F)
# Plot WG regression lines
curve(fit$coefficients[1] + fit$coefficients[2] * x, from = 0.25,
to = 0.95, add = TRUE, lty = 2, lwd = 2)
# Plot LL regression lines
Int <- fit$coefficients[1] + fit$coefficients[3]
Slp <- fit$coefficients[2] + fit$coefficients[4]
curve((Int) + (Slp) * x, from = 0.25, to = 0.95,
add = TRUE, lty = 2, lwd = 2)
legend("topleft", legend = c("LL","WG"), pch = c(1, 16), cex = 1,
col = "black", bty = "n", pt.cex = 2)
dev.off()
graphics.off() # shuts down open devices
img <- readPNG("./figures/Tradeoff.png")
grid.raster(img)
png(filename="~/GitHub/PhosTrait/figures/Tradeoff.png",
width = 1200, height = 1200, res = 96*2)
# Set plotting dimensions
par(mar=c(4,4,0,1)+ 0.1)
# Little Long points
plot(LL.nb, log10(LL.umax), axes = F, xlab = "Niche breadth", ylab = "Maximum growth rate",
pch = 21, cex = 2, cex.lab = 4, las = 1, col = "black", bg = "white",
xlim = c(0.2,1), ylim = c(-2, 1), lwd = 1.5)
# Wintergreen points
points(WG.nb, log10(WG.umax), pch = 21, cex = 2, col = "black", bg = "black")
# Format axes
box(lwd = 2)
ticks <- c(0.01, 0.1, 1, 10)
axis(side = 1, labels = T, cex.axis = 1)
axis(side = 2, las = 1, cex.axis = 1, labels = ticks,
at = log10(ticks))
axis(3, labels = F)
axis(side = 4, at = log10(ticks), labels = F)
# Plot WG regression lines
curve(fit$coefficients[1] + fit$coefficients[2] * x, from = 0.25,
to = 0.95, add = TRUE, lty = 2, lwd = 2)
# Plot LL regression lines
Int <- fit$coefficients[1] + fit$coefficients[3]
Slp <- fit$coefficients[2] + fit$coefficients[4]
curve((Int) + (Slp) * x, from = 0.25, to = 0.95,
add = TRUE, lty = 2, lwd = 2)
legend("topleft", legend = c("LL","WG"), pch = c(1, 16), cex = 1,
col = "black", bty = "n", pt.cex = 2)
dev.off()
graphics.off() # shuts down open devices
img <- readPNG("./figures/Tradeoff.png")
grid.raster(img)
png(filename="~/GitHub/PhosTrait/figures/Tradeoff.png",
width = 1200, height = 1200, res = 96*2)
# Set plotting dimensions
par(mar=c(4,4,0,1)+ 0.1)
# Little Long points
plot(LL.nb, log10(LL.umax), axes = F, xlab = "Niche breadth", ylab = "Maximum growth rate",
pch = 21, cex = 2, cex.lab = 2.5, las = 1, col = "black", bg = "white",
xlim = c(0.2,1), ylim = c(-2, 1), lwd = 1.5)
# Wintergreen points
points(WG.nb, log10(WG.umax), pch = 21, cex = 2, col = "black", bg = "black")
# Format axes
box(lwd = 2)
ticks <- c(0.01, 0.1, 1, 10)
axis(side = 1, labels = T, cex.axis = 1)
axis(side = 2, las = 1, cex.axis = 1, labels = ticks,
at = log10(ticks))
axis(3, labels = F)
axis(side = 4, at = log10(ticks), labels = F)
# Plot WG regression lines
curve(fit$coefficients[1] + fit$coefficients[2] * x, from = 0.25,
to = 0.95, add = TRUE, lty = 2, lwd = 2)
# Plot LL regression lines
Int <- fit$coefficients[1] + fit$coefficients[3]
Slp <- fit$coefficients[2] + fit$coefficients[4]
curve((Int) + (Slp) * x, from = 0.25, to = 0.95,
add = TRUE, lty = 2, lwd = 2)
legend("topleft", legend = c("LL","WG"), pch = c(1, 16), cex = 1,
col = "black", bty = "n", pt.cex = 2)
dev.off()
graphics.off() # shuts down open devices
img <- readPNG("./figures/Tradeoff.png")
grid.raster(img)
# Subset umax data to plot
LL.nb <- subset(nb, lake == "LL")
WG.nb <- subset(nb, lake == "WG")
# Subset niche breadth data to plot
LL.umax <- subset(umax, lake == "LL")
WG.umax<-subset(umax, lake == "WG")
# Initiate file for figure
png(filename="~/GitHub/PhosTrait/figures/Tradeoff.png",
width = 1200, height = 1200, res = 96*2)
# Set plotting dimensions
par(mar=c(4,4,0,1)+ 0.1)
# Little Long points
plot(LL.nb, log10(LL.umax), axes = F, xlab = "Niche breadth", ylab = "Maximum growth rate",
pch = 21, cex = 2, cex.lab = 2, las = 1, col = "black", bg = "white",
xlim = c(0.2,1), ylim = c(-2, 1), lwd = 1.5)
# Wintergreen points
points(WG.nb, log10(WG.umax), pch = 21, cex = 2, col = "black", bg = "black")
# Format axes
box(lwd = 2)
ticks <- c(0.01, 0.1, 1, 10)
axis(side = 1, labels = T, cex.axis = 1)
axis(side = 2, las = 1, cex.axis = 1, labels = ticks,
at = log10(ticks))
axis(3, labels = F)
axis(side = 4, at = log10(ticks), labels = F)
# Plot WG regression lines
curve(fit$coefficients[1] + fit$coefficients[2] * x, from = 0.25,
to = 0.95, add = TRUE, lty = 2, lwd = 2)
# Plot LL regression lines
Int <- fit$coefficients[1] + fit$coefficients[3]
Slp <- fit$coefficients[2] + fit$coefficients[4]
curve((Int) + (Slp) * x, from = 0.25, to = 0.95,
add = TRUE, lty = 2, lwd = 2)
legend("topleft", legend = c("LL","WG"), pch = c(1, 16), cex = 1,
col = "black", bty = "n", pt.cex = 2)
dev.off()
graphics.off() # shuts down open devices
img <- readPNG("./figures/Tradeoff.png")
grid.raster(img)
# Raw growth rate data
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
str(gr.data)
colnames(gr.data)[1]<-"isolate"
# Data standardizing - log10 transformation
log.gr <- log10(gr.data[,2:19]+1)
# Data standardizing - divide by sum of species growth
gr.std <- gr.data[,2:19] / (apply(gr.data[,2:19], 1, sum))
# Choose data for clustering
data <- gr.std
# Identify distance metric
dist <- "euclidean"
# Identify agglomerative method
clust <- "average"
pv.clust <- pvclust(data, nboot = 10000, method.dist = dist,
method.hclust = clust)
require(pvclust)
install.packages(pvclust)
install.package(pvclust)
install.packages("pvclust")
require("pvclust")
pv.clust <- pvclust(data, nboot = 10000, method.dist = dist,
method.hclust = clust)
# Not entirely sure how this works, but should help ID number of clusters
mv.clust <- Mclust(data)
install.packages("Mclust")
install.packages("mclust")
require("mclust")
# Not entirely sure how this works, but should help ID number of clusters
mv.clust <- mclust(data)
# Not entirely sure how this works, but should help ID number of clusters
mv.clust <- Mclust(data)
plot(mv.clust) # plot results
pv.clust <- pvclust(data, nboot = 1000, method.dist = dist,
method.hclust = clust)
# Not entirely sure how this works, but should help ID number of clusters
mv.clust <- Mclust(data)
summary(mv.clust)
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv= c("red", "black", "gray"),
print.pv = TRUE, print.num = FALSE)
# Highlight clusters based on p-values
pvrect(pv.clust, alpha = 0.95, type="geq")
# Highlight clusters based on p-values
pvrect(pv.clust, alpha = 0.90, type="geq")
km <- kmeans(data, 3, nstart = 10, iter.max = 15)
km
# wws = within cluster sums of squares
set.seed(123)
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
d_clust <- Mclust(as.matrix(scaled_data), G=1:15,
modelNames = mclust.options("emModelNames"))
d_clust <- Mclust(as.matrix(data), G=1:15,
modelNames = mclust.options("emModelNames"))
d_clust$BIC
plot(d_clust)
rm(list=ls())
getwd()
setwd("~/GitHub/PhosTrait")
tidy.opts=list(width.cutoff=60)}
package.list <- c('ape', 'seqinr', 'muscle', 'phylolm', 'vegan', 'grid', 'png',
'phylobase', 'adephylo', 'geiger', 'picante', 'stats', 'RColorBrewer', 'mclust',
'caper', 'phylolm', 'pmc', 'ggplot2', 'tidyr', 'dplyr', 'phangorn', 'pander', 'pvclust')
for (package in package.list) {
if (!require(package, character.only=TRUE, quietly=TRUE)) {
install.packages(package)
library(package, character.only=TRUE)
}
}
tidy.opts=list(width.cutoff=60)}
package.list <- c('ape', 'seqinr', 'muscle', 'phylolm', 'vegan', 'grid', 'png',
'phylobase', 'adephylo', 'geiger', 'picante', 'stats', 'RColorBrewer', 'mclust',
'caper', 'phylolm', 'pmc', 'ggplot2', 'tidyr', 'dplyr', 'phangorn', 'pander', 'pvclust')
for (package in package.list) {
if (!require(package, character.only=TRUE, quietly=TRUE)) {
install.packages(package)
library(package, character.only=TRUE)
}
}
tidy.opts=list(width.cutoff=60)
package.list <- c('ape', 'seqinr', 'muscle', 'phylolm', 'vegan', 'grid', 'png',
'phylobase', 'adephylo', 'geiger', 'picante', 'stats', 'RColorBrewer', 'mclust',
'caper', 'phylolm', 'pmc', 'ggplot2', 'tidyr', 'dplyr', 'phangorn', 'pander', 'pvclust')
for (package in package.list) {
if (!require(package, character.only=TRUE, quietly=TRUE)) {
install.packages(package)
library(package, character.only=TRUE)
}
}
tidy.opts=list(width.cutoff=60)}
package.list <- c('ape', 'seqinr', 'muscle', 'phylolm', 'vegan', 'grid', 'png',
'phylobase', 'adephylo', 'geiger', 'picante', 'stats', 'RColorBrewer',
'caper', 'phylolm', 'pmc', 'ggplot2', 'tidyr', 'dplyr', 'phangorn', 'pander')
for (package in package.list) {
if (!require(package, character.only=TRUE, quietly=TRUE)) {
install.packages(package)
library(package, character.only=TRUE)
}
}
gr.data <- read.csv("data/grraw.csv", sep=",", header=TRUE)
str(gr.data)
colnames(gr.data)[1]<-"isolate"
# Data standardizing - log10 transformation
log.gr <- log10(gr.data[,2:19]+1)
# Data standardizing - divide by sum of species growth
gr.std <- gr.data[,2:19] / (apply(gr.data[,2:19], 1, sum))
# Choose data for clustering
data <- gr.std
?pvclust
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE)
require("pvclust")
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE)
install.packages("pvclust")
install.packages("pvclust")
require("pvclust")
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE)
pv.clust <- pvclust(data, nboot = 1000, method.dist = dist,
method.hclust = clust)
# Identify distance metric
dist <- "euclidean"
clust <- "average"
pv.clust <- pvclust(data, nboot = 100, method.dist = dist,
method.hclust = clust)
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE)
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black", au,
print.pv = TRUE, print.num = FALSE)
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black", pv = "au",
print.pv = TRUE, print.num = FALSE)
pv.clust
summary(pv.clust)
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black", signif_type = "au",
print.pv = TRUE, print.num = FALSE)
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black", print.pv = TRUE, print.num = FALSE,
main = NA)
plot(pv.clust, main = paste(dist, clust, sep = " "), cex = 1.0,
cex.pv = 0.75, col.pv = "black", print.pv = TRUE, print.num = FALSE,
main = NULL)
plot(pv.clust, main = NULL, cex = 1.0,
cex.pv = 0.75, col.pv = "black", print.pv = TRUE, print.num = FALSE)
plot(pv.clust, main = NA, cex = 1.0,
cex.pv = 0.75, col.pv = "black", print.pv = TRUE, print.num = FALSE)
plot(pv.clust, main = NA, cex = 1.0,
cex.pv = 0.75, col.pv = "black", print.pv = TRUE, print.num = TRUE)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE, float = 1)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE, float = 0)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE, float = 0.5)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE, float = 0.05)
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
pvrect(pv.clust, alpha = 0.95, type = "geq")
?pvrect
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq")
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE, float = 0)
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "red", lwd = 2, lty = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = "black",
print.pv = TRUE, print.num = FALSE, float = 0, lwd = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = c("black", "red", "grey"),
print.pv = TRUE, print.num = FALSE, float = 0, lwd = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = c("black", "white", "white"),
print.pv = TRUE, print.num = FALSE, float = 0, lwd = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = c("black", "white", "white"),
print.pv = TRUE, print.num = FALSE, float = 0.05, lwd = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 0.75, col.pv = c("black", "white", "white"),
print.pv = TRUE, print.num = FALSE, float = 0, lwd = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 1, col.pv = c("black", "black", "black"),
print.pv = TRUE, print.num = FALSE, float = 0, lwd = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 1, col.pv = c("black", "black", "black"),
print.pv = TRUE, print.num = FALSE, float = 0.01, lwd = 2)
plot(pv.clust, main = NA, cex = 1.0, cex.pv = 1, col.pv = c("black", "white", "black"),
print.pv = TRUE, print.num = FALSE, float = 0.01, lwd = 2)
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"),
print.pv = TRUE, print.num = FALSE, float = 0.01, lwd = 2)
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.01, lwd = 2, xlab = NA)
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.01, lwd = 2, xlab = NA, cex.lab = 2)
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.01, lwd = 2, xlab = NA, cex.lab = 1.5)
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.01, lwd = 2, xlab = NA,
cex.lab = 1.5, las  = 2)
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "red", lwd = 2, lty = 2)
png(filename="~/GitHub/PhosTrait/figures/Cluster.png",
width = 1200, height = 1200, res = 96*2)
# Make plot
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.01, lwd = 2, xlab = NA,
cex.lab = 1.5, las  = 2)
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
# Type "geq" clusters with p-value >= than alpha threshold
# Type "leq" clusters with p-value <= than alpha threshold
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "red", lwd = 2, lty = 2)
dev.off()
graphics.off()
img <- readPNG("./figures/Cluster.png")
grid.raster(img)
png(filename="~/GitHub/PhosTrait/figures/Cluster.png",
width = 1200, height = 1200, res = 96*2)
# Make plot
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.01, lwd = 2, xlab = NA,
cex.lab = 1.5, las  = 2)
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
# Type "geq" clusters with p-value >= than alpha threshold
# Type "leq" clusters with p-value <= than alpha threshold
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "grey", lwd = 2, lty = 2)
dev.off()
graphics.off()
img <- readPNG("./figures/Cluster.png")
grid.raster(img)
pv.clust <- pvclust(data, nboot = 1000, method.dist = dist,
method.hclust = clust)
png(filename="~/GitHub/PhosTrait/figures/Cluster.png",
width = 1200, height = 1200, res = 96*2)
# Make plot
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.02, lwd = 2, xlab = NA,
cex.lab = 1.5, las  = 2)
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
# Type "geq" clusters with p-value >= than alpha threshold
# Type "leq" clusters with p-value <= than alpha threshold
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "grey", lwd = 2, lty = 2)
dev.off()
graphics.off()
img <- readPNG("./figures/Cluster.png")
grid.raster(img)
pv.clust <- pvclust(data, nboot = 10000, method.dist = dist,
method.hclust = clust)
png(filename="~/GitHub/PhosTrait/figures/Cluster.png",
width = 1200, height = 1200, res = 96*2)
# Make plot
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.02, lwd = 2, xlab = NA,
cex.lab = 1.5, las  = 2)
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
# Type "geq" clusters with p-value >= than alpha threshold
# Type "leq" clusters with p-value <= than alpha threshold
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "grey", lwd = 2, lty = 2)
dev.off()
graphics.off()
img <- readPNG("./figures/Cluster.png")
grid.raster(img)
# Initiate file for figure
png(filename="~/GitHub/PhosTrait/figures/Cluster.png",
width = 1200, height = 1200, res = 96*2)
# Make plot
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.02, lwd = 2, xlab = NA,
cex.lab = 1.5, las  = 2)
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
# Type "geq" clusters with p-value >= than alpha threshold
# Type "leq" clusters with p-value <= than alpha threshold
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "grey", lwd = 2, lty = 3)
dev.off()
graphics.off()
img <- readPNG("./figures/Cluster.png")
grid.raster(img)
png(filename="~/GitHub/PhosTrait/figures/Cluster.png",
width = 1200, height = 1200, res = 96*2)
# Make plot
plot(pv.clust, main = NA, sub = NA, cex = 1.0, cex.pv = 1,
col.pv = c("black", "white", "black"), print.pv = TRUE,
print.num = FALSE, float = 0.02, lwd = 2, xlab = NA,
cex.lab = 1.5, las  = 2)
# Highlights clusters based on P-values
# That is, clusters don't exist in highlighted regions
# Type "geq" clusters with p-value >= than alpha threshold
# Type "leq" clusters with p-value <= than alpha threshold
pvrect(pv.clust, alpha = 0.95, pv = "au", type = "geq",
border = "grey", lwd = 2.5, lty = 2)
dev.off()
graphics.off()
img <- readPNG("./figures/Cluster.png")
grid.raster(img)
se.ploty(pv.clust)
seplot(pv.clust)
?seplot
# Diagnostic plot for standard error of p-value
print(pv.clust)
